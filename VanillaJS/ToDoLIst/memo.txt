submit의 기본 동작 - 페이지를 새로고침 하는 것

[ html ]
1. Todo-list 를 만들기를 원하니 html 에 form 태그로 구조를 만들어 준다.
    나중에 JavaScript에서 만지기 쉽게 id는 todo-form으로 설정
2. form 자체는 submit이라는 기본 기능을 내장하는 하나의 묶음 밖에 되지 않는다.
    우리는 이용자가 todo-list 에 무언가 기입하는 것을 원하기 때문에
    form 태그 안에 input 태그를 넣어 'text'를 타이핑할 수 있는 기능을 추가한다.
3. 그 밑에 ul 태그를 생성하여 todo-list에 작성 된 text가 저장 및 나열될 수 있게 한다.

[ JavaScript ]
1. 앞에 html에서 만든 구조 3가지 ('todo-form', 'todo-form 안의 input', 'todo-list') 에
    접속하기 위해 항상 길게 타이핑하는 것은 비효율적이므로 단축을 위해 각각 변수로 설정한다.
2. 이전 greeting 강의에서 form 태그에서의 event는 submit를 발생시키고,
    브라우저는 기본값으로 설정되어 있는 새로고침을 하게 된다.
    우리는 todo-list를 작성한다고 새로고침 되는 것을 원치 않기 때문에
      (todo-list를 1,000번 작성한다고 가정한다면 불필요한 새로고침이 1,000번 발생하고
      1,000번의 랜덤한 이미지가 로드될 것이다.
      -> 데이터적으로 비효율적, 시각적으로 불편)
    event.preventDefault() 로 기본값을 없애준다.
3. text 상자 안에 글을 작성하고 enter를 눌렀을 때 그 글이 초기화 되게 만들기 위해
    toDoInput.value = ""; 을 통해 value를 빈 텍스트로 한다.
4. text 상자를 비게 하는 것은 좋은데 그 전에 이용자가 입력한 텍스트를 저장해야
    나중에 ul태그 안에 사용할 수 있기 때문에 toDoInput.value = ""; 로
    기입한 텍스트가 사라지기 이전에 const newTodo = toDoInput.value; 를 정의하여
    기입한 텍스트가 newTodo라는 값에 저장되게 한다.
5. 앞의 세 가지 동작(기본값방지, 텍스트 저장, text상자비우기)는
    한번에 이루어지는 세트이기때문에 효율성 및 편의를 위해 함수로 묶어준다.

    function handleTodoSubmit() {
      event.preventDefault();
      const newTodo = toDoInput.value;
      toDoInput.value = "";
    }

6. todo-form 안에서 submit이 발생하는 특정 상황에서
    함수 handleTodoSubmit()을 실행 시키기 위해
    toDoForm.addEventListener("submit", handleTodoSubmit); 을 기입한다.
      (함수 handleTodoSubmit이 항상 실행되고 있는 상태라면
        text 창은 항상 비어있는 상태 일 것이기 때문에)



// 7.3 Saving To Dos
todo list를 localStorage에 저장하는 것을 구현하였다.

toDo가 입력될때 마다 toDos[]에 push해준다.
그 다음 localStorage에 toDos를 저장한다.
이때 localStorage에는 string만 저장이 가능하기때문에, 추후 저장된 toDo를 불러오기 위해 JSON.stringify()를 사용
JSON.stringify(): JS object 및 function들을 string으로 변환해줌

localStroage에 저장된 것을 보면, ["a","b","c"]로 나타나있지만 array가 아닌 string이다.



// 9
제대로 이해한게 맞다면 local storage에 array로 저장이 안되기 때문에
JSON.stringify로 array처럼 생긴 string으로 저장한 후
다시 JSON.parse 이용해 array로 꺼내는 방법이네요
array.foreach는 받아온 array를 for 반복문 없이 item 하나씩 function에 넣을 수 있는 신기한 녀석 !



// 댓글 요약 정리
내가 이해한 걸 적어볼까?
그대로 슝슝 읽으면 이해가 될거야!!!
우리가 지정한 리스트들이 새로고침 되었을 때
초기화되지 않으려면 저장을 하는 것이 중요해
어디에 저장을 할거냐면
localStorage!
web상에다가 우리의 데이터들을 저장할 수 있는거지
어떻게 저장할거냐면
localStorage.setItem("키", "값");
키에는 내가 저장하려고 하고 싶은 db 덤탱이에 이름을 정해주는 것
값에는 각각의 데이터 값들을 의미한다.
값에 여러개의 데이터를 넣고 싶은데 어떻게 해?
배열 형식으로 넣으면 돼
근데 배열형식으로 그냥은 안 넣어져
그래서 string 형식으로 바꿔줘야해
배열을 "값" 부분에 저장하고 싶으면
JSON.stringify
을 사용해서 string형식으로 바꿔준다
그럼 "["a","b","c"]" 요로케 된다.
근데 이러면 배열 형식을 사용할 수 없잖아.
그래서 JSON.parse()를 사용하는 것이다.
그럼 string이 아니라 우리가 원하는 배열의 모습이 될테니까!!!
["a","b","c"] 요로코롬 이뿌게
근데 배열로 하면
삭제를 할 때 중복된 내용의 데이터 값들이 들어있거나 그러면
값들을 찾기 어려워지니까
id값을 지정해줄 필요가 있다.
근데 배열에 id값을 어떻게 정해줘?
그래서 우린 객체로 바꿔준다.
{text: "a", id= ""} 이런식으로
id는 자동으로 중복되지 않게 만들어줘야 하는데
좋은 방법이 있다.
그것이 바로 Date.now()이다.
이걸 사용하면 중복될 일이 없음
이 아이디값을 li에 id값과 동일시해주고
li의 id값을 선택해서 그 해당 데이터를 삭제한당





[todoList 기능리스트 정리]

1. array 변수 만들어주기.
2. 함수에 리스트 listItem 넣어주기
3. 저장함수 만들어 todoList에 기능 적용시키기.
==================================
Q. 여기까지의 문제 : 저장은 되어있지만 화면에 보이지 않음.
==================================
4. 변수 하나 만들어 localStorage 정보 가져오기.
5. 가져온 정보 parse 함수로 문자열 객체로 변환시키기.
6. 변환시킨 거 foreach함수로 각각 화면에 뿌려주기.
7. 전에 작성해둔 거 새로고침 후 작성해도 날아가지 않게
    고정 if문 'savedTodos에 정보있다'에 todos = [] 대신, todos = parse변수로 변경해주기
==================================================
Q. 여기까지의 문제 : 삭제버튼을 눌러도 localStorage 에는 정보가 남아있음.
                    그래서 새로고침해도 삭가 안됨. 삭제 해줘야 됨.
A.
문제 해결 방법 ㅣ li.id값을 뽑아서 삭제버튼 클릭 시 li.id 값이 같은 걸
                    필터로 걸러서 남은 것만 보여주기.
===============================================================
8. HandleTodo에 텍스트만 불러왔던 거 id와 텍스트 둘 다 불러오기
9. 삭제 버튼 기능에 'todos 리스트는 내가 찾은 li.id 다른 것만 필터로 걸러서 보여줘'라는 명령어
    (여기서 li.id는 sting이라 number로 변형해야 됨.)