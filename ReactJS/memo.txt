1. Vanilla JavaScript
Vanilla JavaScript에서는 DOM 변경을 직접 처리합니다.
즉, 필요한 DOM 요소를 직접 선택하고, 요소의 속성을 변경하거나 새로운 요소를 추가하거나
기존 요소를 제거하는 등의 작업을 직접 수행합니다.
DOM 변경이 발생하면, 브라우저는 변경된 DOM 트리를 다시 계산하고,
렌더 트리를 다시 생성한 후 화면에 그립니다.
이 과정은 비용이 많이 드는 연산으로,
자주 발생하게 되면 성능을 저하시킬 수 있습니다.

2. ReactJS
ReactJS는 DOM 변경을 처리하기 위해 가상 DOM(Virtual DOM)이라는 개념을 도입합니다.
ReactJS에서는 먼저 메모리에 가상 DOM 트리를 생성합니다.
이 트리는 실제 DOM 트리의 사본으로서, 실제 DOM 트리와 별도로 존재합니다.
ReactJS는 상태 변경이 발생할 때마다 새로운 가상 DOM 트리를 생성하고,
이전의 가상 DOM 트리와 비교하여 변경된 부분을 파악합니다.
이렇게 파악된 변경 사항만 실제 DOM에 반영하는 방식을 사용합니다.
이 과정을 '재조정(Reconciliation)' 또는 'Diffing'이라고 부릅니다.
가상 DOM을 사용함으로써, 변경이 필요한 최소한의 요소만 실제 DOM에 반영되기 때문에
불필요한 연산을 줄이고 성능을 향상시킬 수 있습니다.

따라서, ReactJS는 복잡한 UI 업데이트를 효과적으로 처리할 수 있으며,
이를 통해 웹의 응답성을 향상시키고 사용자 경험을 개선할 수 있습니다!



---------- ---------- ---------- ---------- ---------- ---------- ----------



Jsx에서 자바스크립트를 입력하려면 중괄호 내부에 입력해준다.
이벤트 리스너는 inline 방식으로 추가해준다.

state는 상태, 해당 컴포넌트의 상태를 나나태는 변수이다.
단순히 이벤트를 감지해서 변수값을 변경한다고 해도 그게 화면 변화로 감지되진 않는다.
왜냐면 render작업을 해주어야 하기때문이다.

즉 상태변화를 화면에 보여주려면 render를 다시해주어야한다.
하지만 상태가 바뀔때마다 render 메서드를 호출하는것은 비효율적이다
이를 리액트의 슈퍼파워, hook으로 해결하자 -- 이건 아직 더 배워야함 !